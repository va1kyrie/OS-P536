
resched.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <resched>:
/*------------------------------------------------------------------------
 *  resched  -  Reschedule processor to highest priority eligible process
 *------------------------------------------------------------------------
 */
void    resched(void)           /* Assumes interrupts are disabled      */
{
   0:   e92d4070        push    {r4, r5, r6, lr}
        struct procent *ptold;  /* Ptr to table entry for old process   */
        struct procent *ptnew;  /* Ptr to table entry for new process   */

        /* If rescheduling is deferred, record attempt and return */

        if (Defer.ndefers > 0) {
   4:   e59f30bc        ldr     r3, [pc, #188]  ; c8 <resched+0xc8>
   8:   e5933000        ldr     r3, [r3]
   c:   e3530000        cmp     r3, #0
  10:   da000003        ble     24 <resched+0x24>
                Defer.attempt = TRUE;
  14:   e3a02001        mov     r2, #1
  18:   e59f30a8        ldr     r3, [pc, #168]  ; c8 <resched+0xc8>
  1c:   e5c32004        strb    r2, [r3, #4]
                return;
  20:   e8bd8070        pop     {r4, r5, r6, pc}
        }

        /* Point to process table entry for the current (old) process */

        ptold = &proctab[currpid];
  24:   e59f30a0        ldr     r3, [pc, #160]  ; cc <resched+0xcc>
  28:   e5930000        ldr     r0, [r3]
  2c:   e060c180        rsb     ip, r0, r0, lsl #3
  30:   e1a0c18c        lsl     ip, ip, #3
  34:   e59f3094        ldr     r3, [pc, #148]  ; d0 <resched+0xd0>
  38:   e08c4003        add     r4, ip, r3

        if (ptold->prstate == PR_CURR) {  /* Process remains eligible */
  3c:   e19c20b3        ldrh    r2, [ip, r3]
  40:   e3520001        cmp     r2, #1
  44:   1a00000d        bne     80 <resched+0x80>
                if (ptold->prprio > firstkey(readylist)) {
  48:   e1d420f2        ldrsh   r2, [r4, #2]
  4c:   e59f1080        ldr     r1, [pc, #128]  ; d4 <resched+0xd4>
  50:   e1d110b0        ldrh    r1, [r1]
  54:   e59f507c        ldr     r5, [pc, #124]  ; d8 <resched+0xd8>
  58:   e6bf6071        sxth    r6, r1
  5c:   e0856186        add     r6, r5, r6, lsl #3
  60:   e1d660f4        ldrsh   r6, [r6, #4]
  64:   e7955186        ldr     r5, [r5, r6, lsl #3]
  68:   e1520005        cmp     r2, r5
  6c:   c8bd8070        popgt   {r4, r5, r6, pc}
                        return;
                }

                /* Old process will no longer remain current */

                ptold->prstate = PR_READY;
  70:   e3a0e002        mov     lr, #2
  74:   e18ce0b3        strh    lr, [ip, r3]
                insert(currpid, readylist, ptold->prprio);
  78:   e6bf1071        sxth    r1, r1
  7c:   ebfffffe        bl      0 <insert>
        }

        /* Force context switch to highest priority ready process */

        currpid = dequeue(readylist);
  80:   e59f304c        ldr     r3, [pc, #76]   ; d4 <resched+0xd4>
  84:   e1d300f0        ldrsh   r0, [r3]
  88:   ebfffffe        bl      0 <dequeue>
  8c:   e59f3038        ldr     r3, [pc, #56]   ; cc <resched+0xcc>
  90:   e5830000        str     r0, [r3]
        ptnew = &proctab[currpid];
  94:   e0600180        rsb     r0, r0, r0, lsl #3
  98:   e1a00180        lsl     r0, r0, #3
  9c:   e59f302c        ldr     r3, [pc, #44]   ; d0 <resched+0xd0>
  a0:   e0801003        add     r1, r0, r3
        ptnew->prstate = PR_CURR;
  a4:   e3a02001        mov     r2, #1
  a8:   e18020b3        strh    r2, [r0, r3]
        preempt = QUANTUM;              /* Reset time slice for process */
  ac:   e3a02002        mov     r2, #2
  b0:   e59f3024        ldr     r3, [pc, #36]   ; dc <resched+0xdc>
  b4:   e5832000        str     r2, [r3]
#ifdef MMU
        FlushTLB();
        setPageTable();
#endif/*MMU*/

        ctxsw(&ptold->prstkptr, &ptnew->prstkptr);
  b8:   e2840004        add     r0, r4, #4
  bc:   e2811004        add     r1, r1, #4
  c0:   ebfffffe        bl      0 <ctxsw>
  c4:   e8bd8070        pop     {r4, r5, r6, pc}
        ...

000000e0 <resched_cntl>:
 *------------------------------------------------------------------------
 */
status  resched_cntl(           /* Assumes interrupts are disabled      */
          int32 defer           /* Either DEFER_START or DEFER_STOP     */
        )
{
  e0:   e92d4008        push    {r3, lr}
        switch (defer) {
  e4:   e3500001        cmp     r0, #1
  e8:   0a000002        beq     f8 <resched_cntl+0x18>
  ec:   e3500002        cmp     r0, #2
  f0:   0a00000b        beq     124 <resched_cntl+0x44>
  f4:   ea000019        b       160 <resched_cntl+0x80>

            case DEFER_START:   /* Handle a deferral request */

                if (Defer.ndefers++ == 0) {
  f8:   e59f2088        ldr     r2, [pc, #136]  ; 188 <resched_cntl+0xa8>
  fc:   e5923000        ldr     r3, [r2]
 100:   e2831001        add     r1, r3, #1
 104:   e5821000        str     r1, [r2]
 108:   e3530000        cmp     r3, #0
 10c:   1a000015        bne     168 <resched_cntl+0x88>
                        Defer.attempt = FALSE;
 110:   e3a02000        mov     r2, #0
 114:   e59f306c        ldr     r3, [pc, #108]  ; 188 <resched_cntl+0xa8>
 118:   e5c32004        strb    r2, [r3, #4]
                }
                return OK;
 11c:   e3a00001        mov     r0, #1
 120:   e8bd8008        pop     {r3, pc}

            case DEFER_STOP:    /* Handle end of deferral */
                if (Defer.ndefers <= 0) {
 124:   e59f305c        ldr     r3, [pc, #92]   ; 188 <resched_cntl+0xa8>
 128:   e5933000        ldr     r3, [r3]
 12c:   e3530000        cmp     r3, #0
 130:   da00000e        ble     170 <resched_cntl+0x90>
                        return SYSERR;
                }
                if ( (--Defer.ndefers == 0) && Defer.attempt ) {
 134:   e2433001        sub     r3, r3, #1
 138:   e59f2048        ldr     r2, [pc, #72]   ; 188 <resched_cntl+0xa8>
 13c:   e5823000        str     r3, [r2]
 140:   e3530000        cmp     r3, #0
 144:   1a00000b        bne     178 <resched_cntl+0x98>
 148:   e5d23004        ldrb    r3, [r2, #4]
 14c:   e3530000        cmp     r3, #0
 150:   0a00000a        beq     180 <resched_cntl+0xa0>
                        resched();
 154:   ebfffffe        bl      0 <resched>
                }
                return OK;
 158:   e3a00001        mov     r0, #1
 15c:   e8bd8008        pop     {r3, pc}

            default:
                return SYSERR;
 160:   e3e00000        mvn     r0, #0
 164:   e8bd8008        pop     {r3, pc}
            case DEFER_START:   /* Handle a deferral request */

                if (Defer.ndefers++ == 0) {
                        Defer.attempt = FALSE;
                }
                return OK;
 168:   e3a00001        mov     r0, #1
 16c:   e8bd8008        pop     {r3, pc}

            case DEFER_STOP:    /* Handle end of deferral */
                if (Defer.ndefers <= 0) {
                        return SYSERR;
 170:   e3e00000        mvn     r0, #0
 174:   e8bd8008        pop     {r3, pc}
                }
                if ( (--Defer.ndefers == 0) && Defer.attempt ) {
                        resched();
                }
                return OK;
 178:   e3a00001        mov     r0, #1
 17c:   e8bd8008        pop     {r3, pc}
 180:   e3a00001        mov     r0, #1

            default:
                return SYSERR;
        }
}
 184:   e8bd8008        pop     {r3, pc}
 188:   00000000        .word   0x00000000
