
resched2.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <resched2>:
/*------------------------------------------------------------------------
 *  resched  -  Reschedule processor to highest priority eligible process
 *------------------------------------------------------------------------
 */
void    resched2(int nextstate)         /* Assumes interrupts are disabled      */
{
   0:   e92d40f8        push    {r3, r4, r5, r6, r7, lr}
   4:   e1a04000        mov     r4, r0
        struct procent *ptold;  /* Ptr to table entry for old process   */
        struct procent *ptnew;  /* Ptr to table entry for new process   */

        /* If rescheduling is deferred, record attempt and return */

        if (Defer.ndefers > 0) {
   8:   e59f30c8        ldr     r3, [pc, #200]  ; d8 <resched2+0xd8>
   c:   e5933000        ldr     r3, [r3]
  10:   e3530000        cmp     r3, #0
  14:   da000003        ble     28 <resched2+0x28>
                Defer.attempt = TRUE;
  18:   e3a02001        mov     r2, #1
  1c:   e59f30b4        ldr     r3, [pc, #180]  ; d8 <resched2+0xd8>
  20:   e5c32004        strb    r2, [r3, #4]
                return;
  24:   e8bd80f8        pop     {r3, r4, r5, r6, r7, pc}
        }

        /* Point to process table entry for the current (old) process */

        ptold = &proctab[currpid];
  28:   e59f30ac        ldr     r3, [pc, #172]  ; dc <resched2+0xdc>
  2c:   e5930000        ldr     r0, [r3]
  30:   e0606180        rsb     r6, r0, r0, lsl #3
  34:   e1a06186        lsl     r6, r6, #3
  38:   e59f50a0        ldr     r5, [pc, #160]  ; e0 <resched2+0xe0>
  3c:   e0867005        add     r7, r6, r5

        if (nextstate == PR_CURR || nextstate == PR_READY) {
  40:   e2443001        sub     r3, r4, #1
  44:   e3530001        cmp     r3, #1
  48:   8a00000f        bhi     8c <resched2+0x8c>
                /* Process remains eligible */
                if (ptold->prprio > firstkey(readylist) && nextstate == PR_CURR) {
  4c:   e1d720f2        ldrsh   r2, [r7, #2]
  50:   e59f308c        ldr     r3, [pc, #140]  ; e4 <resched2+0xe4>
  54:   e1d310b0        ldrh    r1, [r3]
  58:   e59f3088        ldr     r3, [pc, #136]  ; e8 <resched2+0xe8>
  5c:   e6bfc071        sxth    ip, r1
  60:   e083c18c        add     ip, r3, ip, lsl #3
  64:   e1dcc0f4        ldrsh   ip, [ip, #4]
  68:   e793318c        ldr     r3, [r3, ip, lsl #3]
  6c:   e1520003        cmp     r2, r3
  70:   da000001        ble     7c <resched2+0x7c>
  74:   e3540001        cmp     r4, #1
  78:   08bd80f8        popeq   {r3, r4, r5, r6, r7, pc}
                        return;
                }

                /* else old process will no longer remain current */

                ptold->prstate = PR_READY;
  7c:   e3a03002        mov     r3, #2
  80:   e18630b5        strh    r3, [r6, r5]
                insert(currpid, readylist, ptold->prprio);
  84:   e6bf1071        sxth    r1, r1
  88:   ebfffffe        bl      0 <insert>
        }else{
                ptold->prstate = nextstate;
        }

        /* Force context switch to highest priority ready process */
        ptold->prstate = nextstate;
  8c:   e18640b5        strh    r4, [r6, r5]

        currpid = dequeue(readylist);
  90:   e59f304c        ldr     r3, [pc, #76]   ; e4 <resched2+0xe4>
  94:   e1d300f0        ldrsh   r0, [r3]
  98:   ebfffffe        bl      0 <dequeue>
  9c:   e59f3038        ldr     r3, [pc, #56]   ; dc <resched2+0xdc>
  a0:   e5830000        str     r0, [r3]
        ptnew = &proctab[currpid];
  a4:   e0600180        rsb     r0, r0, r0, lsl #3
  a8:   e1a02180        lsl     r2, r0, #3
  ac:   e59f302c        ldr     r3, [pc, #44]   ; e0 <resched2+0xe0>
  b0:   e0821003        add     r1, r2, r3
        ptnew->prstate = PR_CURR;
  b4:   e3a00001        mov     r0, #1
  b8:   e18200b3        strh    r0, [r2, r3]
        preempt = QUANTUM;              /* Reset time slice for process */
  bc:   e3a02002        mov     r2, #2
  c0:   e59f3024        ldr     r3, [pc, #36]   ; ec <resched2+0xec>
  c4:   e5832000        str     r2, [r3]
#ifdef MMU
        FlushTLB();
        setPageTable();
#endif/*MMU*/

        ctxsw(&ptold->prstkptr, &ptnew->prstkptr);
  c8:   e2870004        add     r0, r7, #4
  cc:   e2811004        add     r1, r1, #4
  d0:   ebfffffe        bl      0 <ctxsw>
  d4:   e8bd80f8        pop     {r3, r4, r5, r6, r7, pc}
        ...

000000f0 <resched_cntl2>:
 *------------------------------------------------------------------------
 */
status  resched_cntl2(          /* Assumes interrupts are disabled      */
          int32 defer           /* Either DEFER_START or DEFER_STOP     */
        )
{
  f0:   e92d4008        push    {r3, lr}
        switch (defer) {
  f4:   e3500001        cmp     r0, #1
  f8:   0a000002        beq     108 <resched_cntl2+0x18>
  fc:   e3500002        cmp     r0, #2
 100:   0a00000b        beq     134 <resched_cntl2+0x44>
 104:   ea000019        b       170 <resched_cntl2+0x80>

            case DEFER_START:   /* Handle a deferral request */

                if (Defer.ndefers++ == 0) {
 108:   e59f2088        ldr     r2, [pc, #136]  ; 198 <resched_cntl2+0xa8>
 10c:   e5923000        ldr     r3, [r2]
 110:   e2831001        add     r1, r3, #1
 114:   e5821000        str     r1, [r2]
 118:   e3530000        cmp     r3, #0
 11c:   1a000015        bne     178 <resched_cntl2+0x88>
                        Defer.attempt = FALSE;
 120:   e3a02000        mov     r2, #0
 124:   e59f306c        ldr     r3, [pc, #108]  ; 198 <resched_cntl2+0xa8>
 128:   e5c32004        strb    r2, [r3, #4]
                }
                return OK;
 12c:   e3a00001        mov     r0, #1
 130:   e8bd8008        pop     {r3, pc}

            case DEFER_STOP:    /* Handle end of deferral */
                if (Defer.ndefers <= 0) {
 134:   e59f305c        ldr     r3, [pc, #92]   ; 198 <resched_cntl2+0xa8>
 138:   e5933000        ldr     r3, [r3]
 13c:   e3530000        cmp     r3, #0
 140:   da00000e        ble     180 <resched_cntl2+0x90>
                        return SYSERR;
                }
                if ( (--Defer.ndefers == 0) && Defer.attempt ) {
 144:   e2433001        sub     r3, r3, #1
 148:   e59f2048        ldr     r2, [pc, #72]   ; 198 <resched_cntl2+0xa8>
 14c:   e5823000        str     r3, [r2]
 150:   e3530000        cmp     r3, #0
 154:   1a00000b        bne     188 <resched_cntl2+0x98>
 158:   e5d23004        ldrb    r3, [r2, #4]
 15c:   e3530000        cmp     r3, #0
 160:   0a00000a        beq     190 <resched_cntl2+0xa0>
                        resched();
 164:   ebfffffe        bl      0 <resched>
                }
                return OK;
 168:   e3a00001        mov     r0, #1
 16c:   e8bd8008        pop     {r3, pc}

            default:
                return SYSERR;
 170:   e3e00000        mvn     r0, #0
 174:   e8bd8008        pop     {r3, pc}
            case DEFER_START:   /* Handle a deferral request */

                if (Defer.ndefers++ == 0) {
                        Defer.attempt = FALSE;
                }
                return OK;
 178:   e3a00001        mov     r0, #1
 17c:   e8bd8008        pop     {r3, pc}

            case DEFER_STOP:    /* Handle end of deferral */
                if (Defer.ndefers <= 0) {
                        return SYSERR;
 180:   e3e00000        mvn     r0, #0
 184:   e8bd8008        pop     {r3, pc}
                }
                if ( (--Defer.ndefers == 0) && Defer.attempt ) {
                        resched();
                }
                return OK;
 188:   e3a00001        mov     r0, #1
 18c:   e8bd8008        pop     {r3, pc}
 190:   e3a00001        mov     r0, #1

            default:
                return SYSERR;
        }
}
 194:   e8bd8008        pop     {r3, pc}
 198:   00000000        .word   0x00000000
